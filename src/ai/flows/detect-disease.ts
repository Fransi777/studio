// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Detects diseases in a plant from an image, returns a diagnosis with confidence levels, and suggests treatments.
 *
 * - detectDisease - A function that handles the plant disease detection process.
 * - DetectDiseaseInput - The input type for the detectDisease function.
 * - DetectDiseaseOutput - The return type for the detectDisease function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectDiseaseInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a plant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type DetectDiseaseInput = z.infer<typeof DetectDiseaseInputSchema>;

const DiseaseDiagnosisSchema = z.object({
  disease: z.string().describe('The name of the potential disease.'),
  confidence: z
    .number()
    .describe('The confidence level of the diagnosis (0-1).'),
  treatmentSuggestions: z
    .array(z.string())
    .describe('Tailored treatment suggestions for the detected disease. Provide 2-3 concise suggestions.'),
});

const DetectDiseaseOutputSchema = z.object({
  diagnoses: z
    .array(DiseaseDiagnosisSchema)
    .describe('A list of potential diseases, their confidence levels, and treatment suggestions.'),
});
export type DetectDiseaseOutput = z.infer<typeof DetectDiseaseOutputSchema>;

export async function detectDisease(input: DetectDiseaseInput): Promise<DetectDiseaseOutput> {
  return detectDiseaseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectDiseasePrompt',
  input: {schema: DetectDiseaseInputSchema},
  output: {schema: DetectDiseaseOutputSchema},
  prompt: `You are an expert in plant pathology. Analyze the provided image of a plant and identify any potential diseases.

  For each potential disease identified, provide:
  1. The name of the disease.
  2. A confidence level for this diagnosis (a number between 0 and 1).
  3. A list of 2-3 concise, actionable treatment suggestions suitable for a home gardener or farmer.

  If the plant appears healthy or no specific disease can be identified with reasonable confidence, return an empty list for diagnoses.

  Image: {{media url=photoDataUri}}`,
});

const detectDiseaseFlow = ai.defineFlow(
  {
    name: 'detectDiseaseFlow',
    inputSchema: DetectDiseaseInputSchema,
    outputSchema: DetectDiseaseOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure output is not null, and if diagnoses is null/undefined, default to an empty array.
    return { diagnoses: output?.diagnoses ?? [] };
  }
);
